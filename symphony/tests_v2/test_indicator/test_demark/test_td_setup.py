import unittest
import sys
import logging
from symphony.tests_v2.utils import dummy_td_countdown_data
from symphony.indicator_v2 import IndicatorRegistry
from symphony.indicator_v2.demark import bullish_price_flip, bearish_price_flip
from symphony.indicator_v2.demark import td_sell_setup, td_buy_setup
import pandas as pd

dummy_price_history = dummy_td_countdown_data()
bearish_price_flip(dummy_price_history)
bullish_price_flip(dummy_price_history)


class TDSetupTest(unittest.TestCase):

    def test_td_buy_setup(self):

        df = td_buy_setup(dummy_price_history, price_history_copy=True).price_history
        for index, row in dummy_price_history.price_history.iterrows():
            # Minimum for full pattern to be recognized (price flip + setup)
            if df.index.get_loc(index) < 15:
                continue

            # Test if all setups in test history caught by indicator
            if df["TEST_BUY_SETUP"].loc[index] == 9:
                self.assertEquals(df[IndicatorRegistry.BUY_SETUP.value].loc[index], 1)

            # Test if all setups generated by indicator are in test history
            if df[IndicatorRegistry.BUY_SETUP.value].loc[index]:
                self.assertEquals(df["TEST_BUY_SETUP"].loc[index], 9)

        # Test the start index. Also tests copy implicitly
        start_ts = pd.Timestamp('2019-11-12 10:00:00')
        earliest_possible_pattern_ts = pd.Timestamp('2019-11-12 10:00:00') + pd.Timedelta(minutes=dummy_price_history.timeframe.value*15)
        df = td_buy_setup(dummy_price_history, start=start_ts, price_history_copy=True).price_history

        for index, row in dummy_price_history.price_history.iterrows():

            # Test undesired setups not calculated
            if df["TEST_BUY_SETUP"].loc[index] == 9 and index < start_ts:
                self.assertNotEquals(df[IndicatorRegistry.BUY_SETUP.value].loc[index], 1)

            # Test if all setups in test history caught by indicator
            if df["TEST_BUY_SETUP"].loc[index] == 9 and index >= earliest_possible_pattern_ts:
                self.assertEquals(df[IndicatorRegistry.BUY_SETUP.value].loc[index], 1)

            # Test if all undesired setups not calculated
            if df[IndicatorRegistry.BUY_SETUP.value].loc[index] and index < start_ts:
                self.assertEquals(df["TEST_BUY_SETUP"].loc[index], 9)

            # Test if all setups generated by indicator are in test history
            if df[IndicatorRegistry.BUY_SETUP.value].loc[index] and index >= earliest_possible_pattern_ts:
                self.assertEquals(df["TEST_BUY_SETUP"].loc[index], 9)
        print(__name__ + "." + sys._getframe().f_code.co_name + ": Unit test passed")

    def test_td_sell_setup(self):

        df = td_sell_setup(dummy_price_history, price_history_copy=True).price_history

        for index, row in dummy_price_history.price_history.iterrows():
            # Minimum for full pattern to be recognized (price flip + setup)
            if df.index.get_loc(index) < 15:
                continue

            # Test if all setups in test history caught by indicator
            if df["TEST_SELL_SETUP"].loc[index] == 9:
                self.assertEquals(df[IndicatorRegistry.SELL_SETUP.value].loc[index], 1)

            # Test if all setups generated by indicator are in test history
            if df[IndicatorRegistry.SELL_SETUP.value].loc[index]:
                self.assertEquals(df["TEST_SELL_SETUP"].loc[index], 9)

        # Test the start index. Also tests copy implicitly
        start_ts = pd.Timestamp('2019-11-10 09:00:00')
        earliest_possible_pattern_ts: pd.Timestamp = pd.Timestamp('2019-11-12 10:00:00') + pd.Timedelta(
            minutes=dummy_price_history.timeframe.value * 15)
        df = td_sell_setup(dummy_price_history, start=start_ts, price_history_copy=True).price_history

        for index, row in dummy_price_history.price_history.iterrows():

            # Test undesired setups not calculated
            if df["TEST_SELL_SETUP"].loc[index] == 9 and index < start_ts:
                self.assertNotEquals(df[IndicatorRegistry.SELL_SETUP.value].loc[index], 1)

            # Test if all setups in test history caught by indicator
            if df["TEST_SELL_SETUP"].loc[index] == 9 and index >= earliest_possible_pattern_ts:
                self.assertEquals(df[IndicatorRegistry.SELL_SETUP.value].loc[index], 1)

            # Test if all undesired setups not calculated
            if df[IndicatorRegistry.SELL_SETUP.value].loc[index] and index < start_ts:
                self.assertEquals(df["TEST_SELL_SETUP"].loc[index], 9)

            # Test if all setups generated by indicator are in test history
            if df[IndicatorRegistry.SELL_SETUP.value].loc[index] and index >= earliest_possible_pattern_ts:
                self.assertEquals(df["TEST_SELL_SETUP"].loc[index], 9)
        print(__name__ + "." + sys._getframe().f_code.co_name + ": Unit test passed")


if __name__ == "__main__":
    logging.basicConfig(stream=sys.stdout)
    logging.getLogger("TDSetupTest.test_td_buy_setup").setLevel(logging.DEBUG)
    logging.getLogger("TDSetupTest.test_td_sell_setup").setLevel(logging.DEBUG)
    unittest.main()
