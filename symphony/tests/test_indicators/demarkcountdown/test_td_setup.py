
import unittest
import json
import os
import sys
import logging
from pprint import pprint
from os.path import join, dirname
import fastjsonschema
import numpy as np
from symphony.schema.schema_kit import SchemaKit
from symphony.indicators.indicator_kit import IndicatorKit
from symphony.indicators.indicators import Indicators
from symphony.tests.suite_utils import TestingUtils

class DemarkSetupTest(unittest.TestCase):
    flow: dict = TestingUtils.dummy_flow()
    price_history: dict = TestingUtils.dummy_price_history()

    def test_td_buy_setup(self):
        #NOTE: Might throw error if end of a setup appears early in price history because the 
        #         proper number of bars may not have been caught (i.e. setup appears without a price flip)

        flow = self.flow
        price_history = self.price_history
        bearish_price_flips = Indicators.bearish_price_flip(flow)["bearish_price_flips"]
        buy_setups = Indicators.td_buy_setup(flow, bearish_price_flips=bearish_price_flips)

        # Test if all setups in test history caught by indicator
        for i, bar in enumerate(price_history["price_history"]):
            if bar["comment"]["setup_index"] == 9 and bar["comment"]["setup_type"] == "BUY":
                self.assertEqual(buy_setups["buy_setups"][i], 1)
        
        # Test if all setups generated by indicator are in test history
        for i, flip_present in enumerate(buy_setups["buy_setups"]):
            if flip_present:
                self.assertEquals(price_history["price_history"][i]["comment"]["setup_index"], 9)
                self.assertEquals(price_history["price_history"][i]["comment"]["setup_type"], 'BUY')

        
        print(__name__ + "." + sys._getframe(  ).f_code.co_name + ": Unit test passed")

    def test_td_sell_setup(self):
        #NOTE: Might throw error if end of a setup appears early in price history because the 
        #         proper number of bars may not have been caught

        flow = self.flow
        price_history = self.price_history
        bullish_price_flips = Indicators.bullish_price_flip(flow)["bullish_price_flips"]
        sell_setups = Indicators.td_sell_setup(flow, bullish_price_flips=bullish_price_flips)
        # Test if all setups in test history caught by indicator
        for i, bar in enumerate(price_history["price_history"]):
            if bar["comment"]["setup_index"] == 9 and bar["comment"]["setup_type"] == "SELL":
                self.assertEqual(sell_setups["sell_setups"][i], 1)
        
        # Test if all setups generated by indicator are in test history
        for i, flip_present in enumerate(sell_setups["sell_setups"]):
            if flip_present:
                self.assertEquals(price_history["price_history"][i]["comment"]["setup_index"], 9)
                self.assertEquals(price_history["price_history"][i]["comment"]["setup_type"], 'SELL')

        print(__name__ + "." + sys._getframe(  ).f_code.co_name + ": Unit test passed")

if __name__ == "__main__":
    logging.basicConfig( stream=sys.stdout )
    logging.getLogger( "DemarkSetupTest.test_td_buy_setup" ).setLevel( logging.DEBUG )
    logging.getLogger( "DemarkSetupTest.test_td_sell_setup" ).setLevel( logging.DEBUG )
    unittest.main()